{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from 'axios';\nvar API_URL = 'http://localhost:8000/api/sunlight';\nexport var getSunlightDuration = function getSunlightDuration(date) {\n  var response, _t;\n  return _regeneratorRuntime.async(function (_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        _context.prev = 0;\n        _context.next = 1;\n        return _regeneratorRuntime.awrap(axios.get(API_URL + \"/duration\", {\n          params: {\n            date: date\n          }\n        }));\n      case 1:\n        response = _context.sent;\n        return _context.abrupt(\"return\", response.data);\n      case 2:\n        _context.prev = 2;\n        _t = _context[\"catch\"](0);\n        console.error('Error fetching sunlight duration:', _t);\n        throw _t;\n      case 3:\n      case \"end\":\n        return _context.stop();\n    }\n  }, null, null, [[0, 2]], Promise);\n};\nexport var getHistoricalData = function getHistoricalData(startDate, endDate) {\n  var response, _t2;\n  return _regeneratorRuntime.async(function (_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        _context2.prev = 0;\n        _context2.next = 1;\n        return _regeneratorRuntime.awrap(axios.get(API_URL + \"/history\", {\n          params: {\n            start_date: startDate,\n            end_date: endDate\n          }\n        }));\n      case 1:\n        response = _context2.sent;\n        return _context2.abrupt(\"return\", response.data);\n      case 2:\n        _context2.prev = 2;\n        _t2 = _context2[\"catch\"](0);\n        console.error('Error fetching historical data:', _t2);\n        throw _t2;\n      case 3:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, null, null, [[0, 2]], Promise);\n};\nexport var compareSunlightData = function compareSunlightData(dates) {\n  var response, _t3;\n  return _regeneratorRuntime.async(function (_context3) {\n    while (1) switch (_context3.prev = _context3.next) {\n      case 0:\n        _context3.prev = 0;\n        _context3.next = 1;\n        return _regeneratorRuntime.awrap(axios.post(API_URL + \"/compare\", {\n          dates: dates\n        }));\n      case 1:\n        response = _context3.sent;\n        return _context3.abrupt(\"return\", response.data);\n      case 2:\n        _context3.prev = 2;\n        _t3 = _context3[\"catch\"](0);\n        console.error('Error comparing sunlight data:', _t3);\n        throw _t3;\n      case 3:\n      case \"end\":\n        return _context3.stop();\n    }\n  }, null, null, [[0, 2]], Promise);\n};","map":{"version":3,"names":["axios","API_URL","getSunlightDuration","date","response","_t","_regeneratorRuntime","async","_context","prev","next","awrap","get","params","sent","abrupt","data","console","error","stop","Promise","getHistoricalData","startDate","endDate","_t2","_context2","start_date","end_date","compareSunlightData","dates","_t3","_context3","post"],"sources":["D:/Programming/Web projects/Sunshine-Tracker/mobile/utils/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:8000/api/sunlight'; // Adjust the URL as needed\n\nexport const getSunlightDuration = async (date) => {\n    try {\n        const response = await axios.get(`${API_URL}/duration`, {\n            params: { date }\n        });\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching sunlight duration:', error);\n        throw error;\n    }\n};\n\nexport const getHistoricalData = async (startDate, endDate) => {\n    try {\n        const response = await axios.get(`${API_URL}/history`, {\n            params: { start_date: startDate, end_date: endDate }\n        });\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching historical data:', error);\n        throw error;\n    }\n};\n\nexport const compareSunlightData = async (dates) => {\n    try {\n        const response = await axios.post(`${API_URL}/compare`, { dates });\n        return response.data;\n    } catch (error) {\n        console.error('Error comparing sunlight data:', error);\n        throw error;\n    }\n};"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,IAAMC,OAAO,GAAG,oCAAoC;AAEpD,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAUC,IAAI;EAAA,IAAAC,QAAA,EAAAC,EAAA;EAAA,OAAAC,mBAAA,CAAAC,KAAA,WAAAC,QAAA;IAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;MAAA;QAAAF,QAAA,CAAAC,IAAA;QAAAD,QAAA,CAAAE,IAAA;QAAA,OAAAJ,mBAAA,CAAAK,KAAA,CAEfX,KAAK,CAACY,GAAG,CAAIX,OAAO,gBAAa;UACpDY,MAAM,EAAE;YAAEV,IAAI,EAAJA;UAAK;QACnB,CAAC,CAAC;MAAA;QAFIC,QAAQ,GAAAI,QAAA,CAAAM,IAAA;QAAA,OAAAN,QAAA,CAAAO,MAAA,WAGPX,QAAQ,CAACY,IAAI;MAAA;QAAAR,QAAA,CAAAC,IAAA;QAAAJ,EAAA,GAAAG,QAAA;QAEpBS,OAAO,CAACC,KAAK,CAAC,mCAAmC,EAAAb,EAAO,CAAC;QAAC,MAAAA,EAAA;MAAA;MAAA;QAAA,OAAAG,QAAA,CAAAW,IAAA;IAAA;EAAA,yBAAAC,OAAA;AAAA,CAGjE;AAED,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAUC,SAAS,EAAEC,OAAO;EAAA,IAAAnB,QAAA,EAAAoB,GAAA;EAAA,OAAAlB,mBAAA,CAAAC,KAAA,WAAAkB,SAAA;IAAA,kBAAAA,SAAA,CAAAhB,IAAA,GAAAgB,SAAA,CAAAf,IAAA;MAAA;QAAAe,SAAA,CAAAhB,IAAA;QAAAgB,SAAA,CAAAf,IAAA;QAAA,OAAAJ,mBAAA,CAAAK,KAAA,CAE3BX,KAAK,CAACY,GAAG,CAAIX,OAAO,eAAY;UACnDY,MAAM,EAAE;YAAEa,UAAU,EAAEJ,SAAS;YAAEK,QAAQ,EAAEJ;UAAQ;QACvD,CAAC,CAAC;MAAA;QAFInB,QAAQ,GAAAqB,SAAA,CAAAX,IAAA;QAAA,OAAAW,SAAA,CAAAV,MAAA,WAGPX,QAAQ,CAACY,IAAI;MAAA;QAAAS,SAAA,CAAAhB,IAAA;QAAAe,GAAA,GAAAC,SAAA;QAEpBR,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAAM,GAAO,CAAC;QAAC,MAAAA,GAAA;MAAA;MAAA;QAAA,OAAAC,SAAA,CAAAN,IAAA;IAAA;EAAA,yBAAAC,OAAA;AAAA,CAG/D;AAED,OAAO,IAAMQ,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAUC,KAAK;EAAA,IAAAzB,QAAA,EAAA0B,GAAA;EAAA,OAAAxB,mBAAA,CAAAC,KAAA,WAAAwB,SAAA;IAAA,kBAAAA,SAAA,CAAAtB,IAAA,GAAAsB,SAAA,CAAArB,IAAA;MAAA;QAAAqB,SAAA,CAAAtB,IAAA;QAAAsB,SAAA,CAAArB,IAAA;QAAA,OAAAJ,mBAAA,CAAAK,KAAA,CAEhBX,KAAK,CAACgC,IAAI,CAAI/B,OAAO,eAAY;UAAE4B,KAAK,EAALA;QAAM,CAAC,CAAC;MAAA;QAA5DzB,QAAQ,GAAA2B,SAAA,CAAAjB,IAAA;QAAA,OAAAiB,SAAA,CAAAhB,MAAA,WACPX,QAAQ,CAACY,IAAI;MAAA;QAAAe,SAAA,CAAAtB,IAAA;QAAAqB,GAAA,GAAAC,SAAA;QAEpBd,OAAO,CAACC,KAAK,CAAC,gCAAgC,EAAAY,GAAO,CAAC;QAAC,MAAAA,GAAA;MAAA;MAAA;QAAA,OAAAC,SAAA,CAAAZ,IAAA;IAAA;EAAA,yBAAAC,OAAA;AAAA,CAG9D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}