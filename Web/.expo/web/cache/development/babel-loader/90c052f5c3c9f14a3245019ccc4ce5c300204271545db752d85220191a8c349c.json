{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Buffer } from 'buffer';\nexport function fetchText(uri) {\n  return _regeneratorRuntime.async(function (_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        if (uri) {\n          _context.next = 1;\n          break;\n        }\n        return _context.abrupt(\"return\", null);\n      case 1:\n        if (!(uri.startsWith('data:image/svg+xml;utf8') && Platform.OS === 'android')) {\n          _context.next = 2;\n          break;\n        }\n        return _context.abrupt(\"return\", dataUriToXml(uri));\n      case 2:\n        if (!uri.startsWith('data:image/svg+xml;base64')) {\n          _context.next = 3;\n          break;\n        }\n        return _context.abrupt(\"return\", decodeBase64Image(uri));\n      case 3:\n        return _context.abrupt(\"return\", fetchUriData(uri));\n      case 4:\n      case \"end\":\n        return _context.stop();\n    }\n  }, null, null, null, Promise);\n}\nvar decodeBase64Image = function decodeBase64Image(uri) {\n  var decoded = decodeURIComponent(uri);\n  var splitContent = decoded.split(';')[1].split(',');\n  var dataType = splitContent[0];\n  var content = splitContent.slice(1).join(',');\n  return Buffer.from(content, dataType).toString('utf-8');\n};\nfunction dataUriToXml(uri) {\n  try {\n    return decodeURIComponent(uri).split(',').slice(1).join(',');\n  } catch (error) {\n    throw new Error(\"Decoding \" + uri + \" failed with error: \" + error);\n  }\n}\nfunction fetchUriData(uri) {\n  var response;\n  return _regeneratorRuntime.async(function (_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        _context2.next = 1;\n        return _regeneratorRuntime.awrap(fetch(uri));\n      case 1:\n        response = _context2.sent;\n        if (!(response.ok || response.status === 0 && uri.startsWith('file://'))) {\n          _context2.next = 3;\n          break;\n        }\n        _context2.next = 2;\n        return _regeneratorRuntime.awrap(response.text());\n      case 2:\n        return _context2.abrupt(\"return\", _context2.sent);\n      case 3:\n        throw new Error(\"Fetching \" + uri + \" failed with status \" + response.status);\n      case 4:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"names":["Buffer","fetchText","uri","_regeneratorRuntime","async","_context","prev","next","abrupt","startsWith","Platform","OS","dataUriToXml","decodeBase64Image","fetchUriData","stop","Promise","decoded","decodeURIComponent","splitContent","split","dataType","content","slice","join","from","toString","error","Error","response","_context2","awrap","fetch","sent","ok","status","text"],"sources":["D:\\Programming\\Web projects\\Sunshine-Tracker\\mobile\\node_modules\\react-native-svg\\src\\utils\\fetchData.ts"],"sourcesContent":["import { Platform } from 'react-native';\nimport { Buffer } from 'buffer';\n\nexport async function fetchText(uri?: string): Promise<string | null> {\n  if (!uri) {\n    return null;\n  }\n  if (uri.startsWith('data:image/svg+xml;utf8') && Platform.OS === 'android') {\n    return dataUriToXml(uri);\n  } else if (uri.startsWith('data:image/svg+xml;base64')) {\n    return decodeBase64Image(uri);\n  } else {\n    return fetchUriData(uri);\n  }\n}\n\nconst decodeBase64Image = (uri: string) => {\n  const decoded = decodeURIComponent(uri);\n  const splitContent = decoded.split(';')[1].split(',');\n  const dataType = splitContent[0] as BufferEncoding;\n  const content = splitContent.slice(1).join(',');\n\n  return Buffer.from(content, dataType).toString('utf-8');\n};\n\nfunction dataUriToXml(uri: string): string | null {\n  try {\n    // decode and remove data:image/svg+xml;utf8, prefix\n    return decodeURIComponent(uri).split(',').slice(1).join(',');\n  } catch (error) {\n    throw new Error(`Decoding ${uri} failed with error: ${error}`);\n  }\n}\n\nasync function fetchUriData(uri: string) {\n  const response = await fetch(uri);\n  if (response.ok || (response.status === 0 && uri.startsWith('file://'))) {\n    return await response.text();\n  }\n  throw new Error(`Fetching ${uri} failed with status ${response.status}`);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}