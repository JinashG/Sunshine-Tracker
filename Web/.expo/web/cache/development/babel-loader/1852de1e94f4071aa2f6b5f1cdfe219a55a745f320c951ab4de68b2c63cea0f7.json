{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    data = _useState2[0],\n    setData = _useState2[1];\n  useEffect(function () {\n    fetch(\"http://127.0.0.1:8000/sunshine\").then(function (res) {\n      return res.json();\n    }).then(function (json) {\n      return setData(json.sunshine);\n    }).catch(function (err) {\n      return console.log(\"Fetch error:\", err);\n    });\n  }, []);\n  return _jsxs(View, {\n    style: {\n      flex: 1,\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    },\n    children: [_jsx(Text, {\n      style: {\n        fontSize: 24\n      },\n      children: \"Hello Sunshine \\uD83C\\uDF1E\"\n    }), _jsxs(Text, {\n      children: [\"Data points: \", data.length]\n    })]\n  });\n}","map":{"version":3,"names":["useEffect","useState","View","Text","jsx","_jsx","jsxs","_jsxs","App","_useState","_useState2","_slicedToArray","data","setData","fetch","then","res","json","sunshine","catch","err","console","log","style","flex","justifyContent","alignItems","children","fontSize","length"],"sources":["D:/Programming/Web projects/Sunshine-Tracker/mobile/App.js"],"sourcesContent":["// import { useEffect, useState } from \"react\";\n// import { View, Text, ScrollView, Dimensions, Platform } from \"react-native\";\n// import { LineChart as RNLineChart } from \"react-native-chart-kit\";\n// import styles from \"./styles\";\n\n// // Import recharts components only for web\n// let ReLineChart, ReLine, ReXAxis, ReYAxis, ReTooltip, ReCartesianGrid, ReResponsiveContainer;\n// if (Platform.OS === \"web\") {\n//   const Recharts = require(\"recharts\");\n//   ReLineChart = Recharts.LineChart;\n//   ReLine = Recharts.Line;\n//   ReXAxis = Recharts.XAxis;\n//   ReYAxis = Recharts.YAxis;\n//   ReTooltip = Recharts.Tooltip;\n//   ReCartesianGrid = Recharts.CartesianGrid;\n//   ReResponsiveContainer = Recharts.ResponsiveContainer;\n// }\n\n// export default function App() {\n//   const [data, setData] = useState([]);\n\n//   useEffect(() => {\n//     fetch(\"http://127.0.0.1:8000/sunshine\") // ⚠️ replace with your PC IP for phone testing\n//       .then((res) => res.json())\n//       .then((json) => setData(json.sunshine))\n//       .catch((err) => console.log(err));\n//   }, []);\n\n//   const avg = data.length ? (data.reduce((a, b) => a + b.hours, 0) / data.length).toFixed(1) : 0;\n//   const max = data.length ? Math.max(...data.map((d) => d.hours)) : 0;\n//   const min = data.length ? Math.min(...data.map((d) => d.hours)) : 0;\n\n//   return (\n//     <ScrollView style={styles.container}>\n//       <Text style={styles.title}>Sunshine Duration</Text>\n\n//       {data.length > 0 ? (\n//         Platform.OS === \"web\" ? (\n//           <View style={{ height: 300, width: \"100%\" }}>\n//             <ReResponsiveContainer width=\"100%\" height=\"100%\">\n//               <ReLineChart data={data} margin={{ top: 20, right: 20, bottom: 20, left: 0 }}>\n//                 <ReCartesianGrid stroke=\"#e5e7eb\" />\n//                 <ReXAxis dataKey=\"date\" />\n//                 <ReYAxis />\n//                 <ReTooltip />\n//                 <ReLine type=\"monotone\" dataKey=\"hours\" stroke=\"#f59e0b\" strokeWidth={2} />\n//               </ReLineChart>\n//             </ReResponsiveContainer>\n//           </View>\n//         ) : (\n//           <RNLineChart\n//             data={{\n//               labels: data.map((d) => d.date.slice(5)),\n//               datasets: [{ data: data.map((d) => d.hours) }],\n//             }}\n//             width={Dimensions.get(\"window\").width - 32}\n//             height={220}\n//             yAxisSuffix=\"h\"\n//             chartConfig={{\n//               backgroundColor: \"#fff\",\n//               backgroundGradientFrom: \"#fff\",\n//               backgroundGradientTo: \"#fff\",\n//               decimalPlaces: 1,\n//               color: () => `#f59e0b`,\n//               labelColor: () => \"#64748B\",\n//             }}\n//             bezier\n//             style={styles.chart}\n//           />\n//         )\n//       ) : (\n//         <Text>Loading...</Text>\n//       )}\n\n//       <View style={styles.insights}>\n//         <Text style={styles.pill}>Avg: {avg}h</Text>\n//         <Text style={styles.pill}>Max: {max}h</Text>\n//         <Text style={styles.pill}>Min: {min}h</Text>\n//       </View>\n//     </ScrollView>\n//   );\n// }\nimport { useEffect, useState } from \"react\";\nimport { View, Text } from \"react-native\";\n\nexport default function App() {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    fetch(\"http://127.0.0.1:8000/sunshine\")\n      .then((res) => res.json())\n      .then((json) => setData(json.sunshine))\n      .catch((err) => console.log(\"Fetch error:\", err));\n  }, []);\n\n  return (\n    <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\n      <Text style={{ fontSize: 24 }}>Hello Sunshine 🌞</Text>\n      <Text>Data points: {data.length}</Text>\n    </View>\n  );\n}\n"],"mappings":";AAkFA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA,EAAAC,IAAA,IAAAC,KAAA;AAG5C,eAAe,SAASC,GAAGA,CAAA,EAAG;EAC5B,IAAAC,SAAA,GAAwBR,QAAQ,CAAC,EAAE,CAAC;IAAAS,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA7BG,IAAI,GAAAF,UAAA;IAAEG,OAAO,GAAAH,UAAA;EAEpBV,SAAS,CAAC,YAAM;IACdc,KAAK,CAAC,gCAAgC,CAAC,CACpCC,IAAI,CAAC,UAACC,GAAG;MAAA,OAAKA,GAAG,CAACC,IAAI,CAAC,CAAC;IAAA,EAAC,CACzBF,IAAI,CAAC,UAACE,IAAI;MAAA,OAAKJ,OAAO,CAACI,IAAI,CAACC,QAAQ,CAAC;IAAA,EAAC,CACtCC,KAAK,CAAC,UAACC,GAAG;MAAA,OAAKC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,GAAG,CAAC;IAAA,EAAC;EACrD,CAAC,EAAE,EAAE,CAAC;EAEN,OACEb,KAAA,CAACL,IAAI;IAACqB,KAAK,EAAE;MAAEC,IAAI,EAAE,CAAC;MAAEC,cAAc,EAAE,QAAQ;MAAEC,UAAU,EAAE;IAAS,CAAE;IAAAC,QAAA,GACvEtB,IAAA,CAACF,IAAI;MAACoB,KAAK,EAAE;QAAEK,QAAQ,EAAE;MAAG,CAAE;MAAAD,QAAA,EAAC;IAAiB,CAAM,CAAC,EACvDpB,KAAA,CAACJ,IAAI;MAAAwB,QAAA,GAAC,eAAa,EAACf,IAAI,CAACiB,MAAM;IAAA,CAAO,CAAC;EAAA,CACnC,CAAC;AAEX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}